{"mappings":"oeAAA,IAAAA,EAAAC,EAAA,SAuCA,SAASC,EAAcC,EAAUC,GAC/B,MAAMC,EAAgBC,KAAKC,SAAW,GAEtC,OAAO,IAAIC,SAAQ,CAACC,EAASC,KACzBC,YAAW,KACLN,EACFI,EAAQ,C,SAAEN,E,MAAUC,IAEpBM,EAAO,C,SAAEP,E,MAAUC,GAAQ,GAE5BA,EAAM,G,CA/CCQ,SAASC,cAAc,SAE/BC,iBAAiB,UAEzB,SAAsBC,GACpBA,EAAIC,iBAEN,MACIC,UAAYb,MAAAc,EAAKC,KAAEA,EAAIC,OAAEA,IACzBL,EAAIM,cAEAC,EAAaC,OAAOL,EAAMM,OAC1BC,EAAYF,OAAOJ,EAAKK,OACxBE,EAAcH,OAAOH,EAAOI,OAElC,IAAK,IAAIG,EAAW,EAAGA,GAAYD,EAAaC,GAAY,EACzC,IAAbA,EACFzB,EAAcyB,EAAUL,GACvBM,MAAK,EAACzB,SAAEA,EAAQC,MAAEA,MACjBJ,EAAA6B,OAAOC,QAAQ,uBAAqB3B,QAAiBC,MAAU,IAEhE2B,OAAM,EAAC5B,SAAEA,EAAQC,MAAEA,MAClBJ,EAAA6B,OAAOG,QAAQ,sBAAoB7B,QAAiBC,MAAU,IAIhEF,EAAcyB,EAAUL,EAAaG,GAAaE,EAAW,IAC1DC,MAAK,EAACzB,SAAEA,EAAQC,MAAEA,MACjBJ,EAAA6B,OAAOC,QAAQ,uBAAqB3B,QAAiBC,MAAU,IAEhE2B,OAAM,EAAC5B,SAAEA,EAAQC,MAAEA,MAClBJ,EAAA6B,OAAOG,QAAQ,sBAAoB7B,QAAeC,MAAU,G","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst formRef = document.querySelector(\".form\");\n\nformRef.addEventListener(\"submit\", onFormSubmit);\n\nfunction onFormSubmit(evt) {\n  evt.preventDefault();\n\nconst {\n    elements: { delay, step, amount}\n} = evt.currentTarget;\n  \n  const delayValue = Number(delay.value);\n  const stepValue = Number(step.value);\n  const amountValue = Number(amount.value);\n\n  for (let position = 1; position <= amountValue; position += 1) {\n    if (position === 1) {\n      createPromise(position, delayValue)\n      .then(({ position, delay }) => {\n        Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      })\n      .catch(({ position, delay }) => {\n        Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n      });\n    \n    } else {\n      createPromise(position, delayValue + stepValue * (position - 1))\n        .then(({ position, delay }) => {\n          Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n        })\n        .catch(({ position, delay }) => {\n          Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n        });\n    };\n  };\n}\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;  \n\n  return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (shouldResolve) {\n          resolve({ position, delay });\n        } else {\n          reject({ position, delay });\n        }\n      }, delay);            \n  });\n};"],"names":["$iQIUW","parcelRequire","$47d4ff9957288465$var$createPromise","position","delay","shouldResolve","Math","random","Promise","resolve","reject","setTimeout","document","querySelector","addEventListener","evt","preventDefault","elements","delay1","step","amount","currentTarget","delayValue","Number","value","stepValue","amountValue","position1","then","Notify","success","catch","failure"],"version":3,"file":"03-promises.37b289ee.js.map"}